// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  image         String    @default("https://pbs.twimg.com/media/FayoH9PXgAAlwje.png")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  email         String
  emailVerified Boolean   @default(false)
  sessions      Session[]
  accounts      Account[]
  Orders        Orders[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Products {
  id          String   @id
  name        String
  description String
  image       String
  price       Int
  stock       Int
  currency    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Orders      Orders[]

  @@map("products")
}

model Orders {
  id         String   @id
  userId     String
  productId  String
  quantity   Int
  totalPrice Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Products   Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("orders")
}
